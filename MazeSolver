#include Wire.h
#include ZumoShield.h

ZumoBuzzer buzzer;
ZumoReflectanceSensorArray reflectanceSensors;
ZumoMotors motors;
Pushbutton button(ZUMO_BUTTON);
int lastError = 0;

//This is the maximum speed the motors will be allowed to turn.
//Did not put the speed at 400 (max) because Zumo was having difficulty detecting some lines
const int MAX_SPEED = 200;
const int tolerance = 600;

void setup()
{
   //Play a little welcome song
  buzzer.play(g32c32);

   //Initialize the reflectance sensors module
  reflectanceSensors.init();

   //Wait for the user button to be pressed and released
  button.waitForButton();

   //Turn on LED to indicate we are in calibration mode
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH);

   //Wait 1 second and then begin automatic sensor calibration
   //by rotating in place to sweep the sensors over the line
  delay(1000);
  int i;
  for(i = 0; i < 80; i++)
  {
    if ((i > 10 && i <= 30)  (i > 50 && i <= 70))
      motors.setSpeeds(-200, 200);
    else
      motors.setSpeeds(200, -200);
    reflectanceSensors.calibrate();

    //Since our counter runs to 80, the total delay will be
    //80*20 = 1600 ms.
    delay(20);
  }
  motors.setSpeeds(0,0);

  //Turn off LED to indicate we are through with calibration
  digitalWrite(13, LOW);
  buzzer.play(">g32>>c32");

  //Wait for the user button to be pressed and released
  button.waitForButton();

  //Play music and wait for it to finish before we start driving.
  buzzer.play("L16 cdegreg4");
  while(buzzer.isPlaying());
}

void loop()
{
  unsigned int sensors[6];

  //Get the position of the line
  int position = reflectanceSensors.readLine(sensors);

  //Our error is how far we are away from the center of the line, which
  //corresponds to position 2500.
  int error = position - 2500;

   //Get motor speed difference using proportional and derivative PID terms
   //Here we are using a proportional constant of 14 and a derivative
   //constant of 6, which should work decently for many Zumo motor choices.

  int speedDifference = error  4 + 6  (error - lastError);

  lastError = error;

   //Get individual motor speeds.  The sign of speedDifference
   //determines if the robot turns left or right.
  m1speed = left
  m2speed = right
  int m1Speed = MAX_SPEED + speedDifference;
  int m2Speed = MAX_SPEED - speedDifference;

  motors.setSpeeds(m1Speed, m2Speed);

  //at t section
  if(sensors[0] > tolerance && sensors[1] > tolerance && sensors[4] > tolerance && sensors[5] > tolerance)
  {
      //move forward
      motors.setSpeeds(150, 150);
      delay(100);

      //all black hit the end
      if(sensors[0] > 700 && sensors[1] > 700 &&
          sensors[4] > 700 && sensors[5] > 700)
      {
           //stop the zumo
           motors.setSpeeds(0,0);
           while(1)
          {
        
          } 
      }
  }
  
  //left hand maze branching
  if(sensors[0] > tolerance && sensors[1] > tolerance)
  {
      motors.setSpeeds(-250, 250);
      delay(115);
  }
